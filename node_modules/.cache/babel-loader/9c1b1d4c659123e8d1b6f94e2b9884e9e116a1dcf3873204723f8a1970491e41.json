{"ast":null,"code":"// const baseurl = process.env.REACT_APP_BASE_URL;\n\n// async function response(response) {\n//     if(!response.ok){\n//         throw new Error(`ffrhw: ${response.status}`)\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = () =>{\n//     fetch(`${baseurl}/weather`).then(response)\n// }\n\n// utils/weatherApi.js\n\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function handleResponse(response) {\n//     if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = (location = 'London') => {\n//     return fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`)\n//         .then(handleResponse);\n// };\n\n// // export const getForecast = (location = 'London', days = 3) => {\n// //     return fetch(`${baseUrl}/forecast.json?key=${apiKey}&q=${location}&days=${days}`)\n// //         .then(handleResponse);\n// // };\n\n// async function fetchData(baseUrl, apiKey, location) {\n//     try {\n//       const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n\n//       // Check if the response is ok (status in the range 200-299)\n//       if (!response.ok) {\n//         throw new Error(`HTTP error status: ${response.status}`);\n//       }\n\n//       // Parse the JSON response body\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       console.error('There was a problem with the fetch operation:', error);\n//       throw error; // Rethrow the error to be handled by the caller\n//     }\n//   }\n\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function handleResponse(response) {\n//     if (!response.ok) {\n//         throw new Error(`HTTP error status: ${response.status}`);\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = async (location = 'London') => {\n//     try {\n//         const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n//         return await handleResponse(response);\n//     } catch (error) {\n//         console.error('Failed to fetch weather data:', error);\n//         throw error; // Rethrow the error to be handled by the caller\n//     }\n// };\n\n// Assuming baseUrl and apiKey are defined and valid\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function fetchWeather(location = 'London') {\n//     try {\n//         const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n\n//         if (!response.ok) {\n//             throw new Error(`HTTP error status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         return data;\n//     } catch (error) {\n//         console.error('Fetch failed:', error);\n//         // Handle the error appropriately here\n//         // You might want to show an error message to the user or log the error\n//     }\n// }\n\n// // Example usage\n// fetchWeather().then(data => console.log(data)).catch(error => console.error(error));\n\n// async function fetchWeather(location = 'London') {\n//     try {\n//         const response = await fetch(`${baseUrl}/weather/current.json?key=${apiKey}&q=${location}`);\n\n//         if (!response.ok) {\n//             throw new Error(`HTTP error status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         return data;\n//     } catch (error) { // Catching the error here\n//         // console.error('Fetch failed:', error); // Log the error\n//         // Handle the error appropriately here\n//         // You might want to show an error message to the user or log the error\n//     }\n// }\n\n// // Example usage\n// fetchWeather().then(data => console.log(data)).catch(error => console.error(error));\n\n// // Assuming these are set in your.env file\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function fetchWeather(location = 'London') {\n//     try {\n//         const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n\n//         // if (!response.ok) {\n//         //     throw new Error(`HTTP error status: ${response.status}`);\n//         // }\n\n//         const data = await response.json();\n//         // console.log({data});\n//         return data;\n//     } catch (error) {\n//         console.error('Fetch failed:', error);\n//         throw error;\n//     }\n// }\n\n// // Example usage\n// fetchWeather()\n//    .then(data => console.log(data));\n// //    .catch(error => console.error(error));\n\n// export const getWeather = async (location = 'London') => {\n//         // try {\n//         //     const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n//         //     return await handleResponse(response);\n//         // } catch (error) {\n//         //     console.error('Failed to fetch weather data:', error);\n//         //     throw error; // Rethrow the error to be handled by the caller\n//         // }\n//     };\n\n// Import necessary functions\n// import { useEffect, useState } from 'react';\n\n// Assuming these are set in your.env file\nconst baseUrl = process.env.REACT_APP_BASE_URL;\nconst apiKey = process.env.REACT_APP_API_KEY;\nasync function fetchWeather(location = 'London') {\n  try {\n    const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n\n    // Check if the response was successful\n    if (!response.ok) {\n      throw new Error(`HTTP error status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Fetch failed:', error);\n    throw error;\n  }\n}\nfetchWeather();\n// Example usage within a component\n// function WeatherComponent() {\n//     const [weatherData, setWeatherData] = useState(null);\n\n//     useEffect(() => {\n//         fetchWeather().then(data => setWeatherData(data)).catch(error => console.error(error));\n//     }, []);\n\n//     return (\n//         <div>\n//             {/* Render your weather data here */}\n//             {weatherData && <p>Current temperature in London: {weatherData.current.temp_c}Â°C</p>}\n//         </div>\n//     );\n// }\n\n// export default WeatherComponent;","map":{"version":3,"names":["baseUrl","process","env","REACT_APP_BASE_URL","apiKey","REACT_APP_API_KEY","fetchWeather","location","response","fetch","ok","Error","status","data","json","error","console"],"sources":["/home/stude/weather-podcast/src/Weather/utill.js"],"sourcesContent":["\n\n\n// const baseurl = process.env.REACT_APP_BASE_URL;\n\n// async function response(response) {\n//     if(!response.ok){\n//         throw new Error(`ffrhw: ${response.status}`)\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = () =>{\n//     fetch(`${baseurl}/weather`).then(response)\n// }\n\n\n\n// utils/weatherApi.js\n\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function handleResponse(response) {\n//     if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = (location = 'London') => {\n//     return fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`)\n//         .then(handleResponse);\n// };\n\n// // export const getForecast = (location = 'London', days = 3) => {\n// //     return fetch(`${baseUrl}/forecast.json?key=${apiKey}&q=${location}&days=${days}`)\n// //         .then(handleResponse);\n// // };\n\n\n\n\n\n// async function fetchData(baseUrl, apiKey, location) {\n//     try {\n//       const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n      \n//       // Check if the response is ok (status in the range 200-299)\n//       if (!response.ok) {\n//         throw new Error(`HTTP error status: ${response.status}`);\n//       }\n      \n//       // Parse the JSON response body\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       console.error('There was a problem with the fetch operation:', error);\n//       throw error; // Rethrow the error to be handled by the caller\n//     }\n//   }\n\n\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function handleResponse(response) {\n//     if (!response.ok) {\n//         throw new Error(`HTTP error status: ${response.status}`);\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = async (location = 'London') => {\n//     try {\n//         const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n//         return await handleResponse(response);\n//     } catch (error) {\n//         console.error('Failed to fetch weather data:', error);\n//         throw error; // Rethrow the error to be handled by the caller\n//     }\n// };\n\n\n\n\n// Assuming baseUrl and apiKey are defined and valid\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function fetchWeather(location = 'London') {\n//     try {\n//         const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n        \n//         if (!response.ok) {\n//             throw new Error(`HTTP error status: ${response.status}`);\n//         }\n        \n//         const data = await response.json();\n//         return data;\n//     } catch (error) {\n//         console.error('Fetch failed:', error);\n//         // Handle the error appropriately here\n//         // You might want to show an error message to the user or log the error\n//     }\n// }\n\n// // Example usage\n// fetchWeather().then(data => console.log(data)).catch(error => console.error(error));\n\n\n\n\n// async function fetchWeather(location = 'London') {\n//     try {\n//         const response = await fetch(`${baseUrl}/weather/current.json?key=${apiKey}&q=${location}`);\n        \n//         if (!response.ok) {\n//             throw new Error(`HTTP error status: ${response.status}`);\n//         }\n        \n//         const data = await response.json();\n//         return data;\n//     } catch (error) { // Catching the error here\n//         // console.error('Fetch failed:', error); // Log the error\n//         // Handle the error appropriately here\n//         // You might want to show an error message to the user or log the error\n//     }\n// }\n\n// // Example usage\n// fetchWeather().then(data => console.log(data)).catch(error => console.error(error));\n\n\n\n\n// // Assuming these are set in your.env file\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function fetchWeather(location = 'London') {\n//     try {\n//         const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n        \n//         // if (!response.ok) {\n//         //     throw new Error(`HTTP error status: ${response.status}`);\n//         // }\n        \n//         const data = await response.json();\n//         // console.log({data});\n//         return data;\n//     } catch (error) {\n//         console.error('Fetch failed:', error);\n//         throw error;\n//     }\n// }\n\n// // Example usage\n// fetchWeather()\n//    .then(data => console.log(data));\n// //    .catch(error => console.error(error));\n\n// export const getWeather = async (location = 'London') => {\n//         // try {\n//         //     const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n//         //     return await handleResponse(response);\n//         // } catch (error) {\n//         //     console.error('Failed to fetch weather data:', error);\n//         //     throw error; // Rethrow the error to be handled by the caller\n//         // }\n//     };\n\n\n\n\n// Import necessary functions\n// import { useEffect, useState } from 'react';\n\n// Assuming these are set in your.env file\nconst baseUrl = process.env.REACT_APP_BASE_URL;\nconst apiKey = process.env.REACT_APP_API_KEY;\n\nasync function fetchWeather(location = 'London') {\n    try {\n        const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n\n        // Check if the response was successful\n        if (!response.ok) {\n            throw new Error(`HTTP error status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Fetch failed:', error);\n        throw error;\n    }\n}\nfetchWeather()\n// Example usage within a component\n// function WeatherComponent() {\n//     const [weatherData, setWeatherData] = useState(null);\n\n//     useEffect(() => {\n//         fetchWeather().then(data => setWeatherData(data)).catch(error => console.error(error));\n//     }, []);\n\n//     return (\n//         <div>\n//             {/* Render your weather data here */}\n//             {weatherData && <p>Current temperature in London: {weatherData.current.temp_c}Â°C</p>}\n//         </div>\n//     );\n// }\n\n// export default WeatherComponent;\n\n\n"],"mappings":"AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAEA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB;AAC9C,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAG,CAACG,iBAAiB;AAE5C,eAAeC,YAAYA,CAACC,QAAQ,GAAG,QAAQ,EAAE;EAC7C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,qBAAqBI,MAAM,MAAMG,QAAQ,EAAE,CAAC;;IAEnF;IACA,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,sBAAsBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC5D;IAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACf;AACJ;AACAT,YAAY,CAAC,CAAC;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}