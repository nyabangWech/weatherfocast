{"ast":null,"code":"// const baseurl = process.env.REACT_APP_BASE_URL;\n\n// async function response(response) {\n//     if(!response.ok){\n//         throw new Error(`ffrhw: ${response.status}`)\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = () =>{\n//     fetch(`${baseurl}/weather`).then(response)\n// }\n\n// utils/weatherApi.js\n\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function handleResponse(response) {\n//     if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = (location = 'London') => {\n//     return fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`)\n//         .then(handleResponse);\n// };\n\n// // export const getForecast = (location = 'London', days = 3) => {\n// //     return fetch(`${baseUrl}/forecast.json?key=${apiKey}&q=${location}&days=${days}`)\n// //         .then(handleResponse);\n// // };\n\nasync function fetchData(baseUrl, apiKey, location) {\n  try {\n    const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n\n    // Check if the response is ok (status in the range 200-299)\n    if (!response.ok) {\n      throw new Error(`HTTP error status: ${response.status}`);\n    }\n\n    // Parse the JSON response body\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('There was a problem with the fetch operation:', error);\n    throw error; // Rethrow the error to be handled by the caller\n  }\n}","map":{"version":3,"names":["fetchData","baseUrl","apiKey","location","response","fetch","ok","Error","status","data","json","error","console"],"sources":["/home/stude/weather-podcast/src/Weather/utill.js"],"sourcesContent":["\n\n\n// const baseurl = process.env.REACT_APP_BASE_URL;\n\n// async function response(response) {\n//     if(!response.ok){\n//         throw new Error(`ffrhw: ${response.status}`)\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = () =>{\n//     fetch(`${baseurl}/weather`).then(response)\n// }\n\n\n\n// utils/weatherApi.js\n\n// const baseUrl = process.env.REACT_APP_BASE_URL;\n// const apiKey = process.env.REACT_APP_API_KEY;\n\n// async function handleResponse(response) {\n//     if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//     }\n//     return await response.json();\n// }\n\n// export const getWeather = (location = 'London') => {\n//     return fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`)\n//         .then(handleResponse);\n// };\n\n// // export const getForecast = (location = 'London', days = 3) => {\n// //     return fetch(`${baseUrl}/forecast.json?key=${apiKey}&q=${location}&days=${days}`)\n// //         .then(handleResponse);\n// // };\n\n\n\n\n\nasync function fetchData(baseUrl, apiKey, location) {\n    try {\n      const response = await fetch(`${baseUrl}/current.json?key=${apiKey}&q=${location}`);\n      \n      // Check if the response is ok (status in the range 200-299)\n      if (!response.ok) {\n        throw new Error(`HTTP error status: ${response.status}`);\n      }\n      \n      // Parse the JSON response body\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('There was a problem with the fetch operation:', error);\n      throw error; // Rethrow the error to be handled by the caller\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAMA,eAAeA,SAASA,CAACC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAE;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,qBAAqBC,MAAM,MAAMC,QAAQ,EAAE,CAAC;;IAEnF;IACA,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC1D;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IACrE,MAAMA,KAAK,CAAC,CAAC;EACf;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}